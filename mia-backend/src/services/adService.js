/**
 * Service de gestion des publicit√©s et cr√©dits
 * G√®re l'√©tat des pubs visionn√©es et l'attribution des cr√©dits
 */

// Stockage en m√©moire des sessions de pub (en production, utiliser Redis ou DB)
const adSessions = new Map();

// Configuration
const AD_DURATION = 30000; // Dur√©e minimale pub (30 secondes)
const AD_CREDITS = 50; // Nombre de cr√©dits accord√©s apr√®s une pub

/**
 * Initialise une session de visionnage de pub
 * @param {string} userId - ID de l'utilisateur
 * @returns {object} - Session avec adId et timestamp
 */
function startAdSession(userId) {
  const adId = generateAdId();
  const session = {
    adId,
    userId,
    startTime: Date.now(),
    completed: false,
    credited: false
  };
  
  adSessions.set(adId, session);
  
  // Nettoyage auto apr√®s 2 minutes (s√©curit√©)
  setTimeout(() => {
    if (adSessions.has(adId)) {
      adSessions.delete(adId);
    }
  }, 120000);
  
  console.log(`üì∫ Nouvelle session pub: ${adId} pour user ${userId}`);
  
  return {
    adId,
    duration: AD_DURATION,
    credits: AD_CREDITS
  };
}

/**
 * V√©rifie et valide le visionnage complet d'une pub
 * @param {string} adId - ID de la session pub
 * @param {string} userId - ID de l'utilisateur
 * @returns {object} - R√©sultat de la v√©rification
 */
function verifyAdCompletion(adId, userId) {
  const session = adSessions.get(adId);
  
  // V√©rifications de s√©curit√©
  if (!session) {
    console.log(`‚ùå Session pub inexistante: ${adId}`);
    return {
      success: false,
      error: 'Session de publicit√© invalide ou expir√©e'
    };
  }
  
  if (session.userId !== userId) {
    console.log(`‚ùå User mismatch pour session ${adId}`);
    return {
      success: false,
      error: 'Session de publicit√© invalide'
    };
  }
  
  if (session.credited) {
    console.log(`‚ö†Ô∏è Cr√©dit d√©j√† accord√© pour ${adId}`);
    return {
      success: false,
      error: 'Cr√©dits d√©j√† accord√©s pour cette publicit√©'
    };
  }
  
  // V√©rifier que la dur√©e minimale est respect√©e
  const elapsed = Date.now() - session.startTime;
  if (elapsed < AD_DURATION) {
    const remaining = Math.ceil((AD_DURATION - elapsed) / 1000);
    console.log(`‚è≥ Pub non termin√©e: ${remaining}s restantes`);
    return {
      success: false,
      error: `Veuillez regarder la publicit√© encore ${remaining} secondes`
    };
  }
  
  // Marquer comme cr√©dit√©
  session.completed = true;
  session.credited = true;
  
  console.log(`‚úÖ Pub compl√©t√©e: ${adId} ‚Üí +${AD_CREDITS} cr√©dits pour ${userId}`);
  
  // Nettoyer la session
  adSessions.delete(adId);
  
  return {
    success: true,
    credits: AD_CREDITS
  };
}

/**
 * G√©n√®re un ID unique pour une session pub
 * @returns {string} - ID unique
 */
function generateAdId() {
  return 'ad_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

/**
 * Obtient les statistiques des sessions actives (debug)
 * @returns {object} - Stats
 */
function getStats() {
  return {
    activeSessions: adSessions.size,
    adDuration: AD_DURATION / 1000 + 's',
    creditsPerAd: AD_CREDITS
  };
}

module.exports = {
  startAdSession,
  verifyAdCompletion,
  getStats,
  AD_CREDITS
};
