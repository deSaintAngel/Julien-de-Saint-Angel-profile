/**
 * Routes de gestion des publicit√©s
 * G√®re le d√©marrage et la validation des pubs
 */

const express = require('express');
const router = express.Router();
const adService = require('../services/adService');
const quotaService = require('../services/quotaService');

/**
 * POST /api/ad/start
 * D√©marre une session de visionnage de pub
 * Body: { userId }
 */
router.post('/start', (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.status(400).json({
        success: false,
        error: 'userId requis'
      });
    }
    
    // Cr√©er une session pub
    const adSession = adService.startAdSession(userId);
    
    res.json({
      success: true,
      adId: adSession.adId,
      duration: adSession.duration,
      credits: adSession.credits,
      message: `Regardez la publicit√© pendant ${adSession.duration / 1000} secondes pour d√©bloquer ${adSession.credits} interactions`
    });
    
  } catch (error) {
    console.error('‚ùå Erreur start ad:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du d√©marrage de la publicit√©'
    });
  }
});

/**
 * POST /api/ad/complete
 * Valide la pub visionn√©e et cr√©dite l'utilisateur
 * Body: { userId, adId }
 */
router.post('/complete', (req, res) => {
  try {
    const { userId, adId } = req.body;
    
    if (!userId || !adId) {
      return res.status(400).json({
        success: false,
        error: 'userId et adId requis'
      });
    }
    
    // V√©rifier que la pub a √©t√© visionn√©e compl√®tement
    const verification = adService.verifyAdCompletion(adId, userId);
    
    if (!verification.success) {
      return res.status(400).json(verification);
    }
    
    // Cr√©diter le quota
    quotaService.addQuota(userId, verification.credits);
    const newQuota = quotaService.getRemainingQuota(userId);
    
    console.log(`üí∞ Cr√©dits accord√©s: ${userId} ‚Üí ${newQuota} interactions`);
    
    res.json({
      success: true,
      creditsAdded: verification.credits,
      totalQuota: newQuota,
      message: `+${verification.credits} interactions d√©bloqu√©es ! Total: ${newQuota}`
    });
    
  } catch (error) {
    console.error('‚ùå Erreur complete ad:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la validation de la publicit√©'
    });
  }
});

/**
 * GET /api/ad/stats
 * Stats des sessions pub actives (debug)
 */
router.get('/stats', (req, res) => {
  try {
    const stats = adService.getStats();
    res.json({
      success: true,
      stats
    });
  } catch (error) {
    console.error('‚ùå Erreur stats:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des stats'
    });
  }
});

module.exports = router;


